# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from interact_msg_srv/Order.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Order(genpy.Message):
  _md5sum = "de7af7864b3678cd3ae3bf317f3d2c2f"
  _type = "interact_msg_srv/Order"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Define a command with types and parameters.


# Command Type:
#  __go__            : move forward
#  __turn__          : spin
#  __speedUp__       : change linear speed
#  __speedDown__     : change linear speed
#  __turnSpeedUp__   : change angular speed
#  __turnSpeedDown__ : change angular speed
#  __stop__          : stop
#  __goto__          : go to one place, one people
#  __charge__        : power up

string functionName

# custom types
#  DIRECTION : enum { 0:Left, 1:Right, 2:Back }
#  QUANTIFIER : enum { 0:Step, 1:Meter, 2:Centimeterm 3:Degree }
#  ADDRESS : string, specify a target (place or people)
#  DEGREE : double
#  DISTANCE : double
#  ONE : "1", a bit

# Parameter List of this command:
#  __go__
#    ""                           : no stop until blocked
#    "ONE"
#    "DISTANCE|QUALIFIER"         : (QUALIFIER != 3)
#  __turn__
#    "DIRECTION"                  : no stop
#    "DIRECTION|ONE"
#    "DIRECTION|DEGREE|QUALIFIER" 
#  __goto__
#    "ADDRESS"

string pList"""
  __slots__ = ['functionName','pList']
  _slot_types = ['string','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       functionName,pList

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Order, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.functionName is None:
        self.functionName = ''
      if self.pList is None:
        self.pList = ''
    else:
      self.functionName = ''
      self.pList = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.functionName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.pList
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.functionName = str[start:end].decode('utf-8')
      else:
        self.functionName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pList = str[start:end].decode('utf-8')
      else:
        self.pList = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.functionName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.pList
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.functionName = str[start:end].decode('utf-8')
      else:
        self.functionName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pList = str[start:end].decode('utf-8')
      else:
        self.pList = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
