// Generated by gencpp from file interact_msg_srv/AsrResultMsg.msg
// DO NOT EDIT!


#ifndef INTERACT_MSG_SRV_MESSAGE_ASRRESULTMSG_H
#define INTERACT_MSG_SRV_MESSAGE_ASRRESULTMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace interact_msg_srv
{
template <class ContainerAllocator>
struct AsrResultMsg_
{
  typedef AsrResultMsg_<ContainerAllocator> Type;

  AsrResultMsg_()
    : retcode(0)
    , ret_msg()
    , req_id()
    , session_id()
    , semantic_result()
    , reco_result()
    , tts_result()
    , answer_type()
    , music_url()  {
    }
  AsrResultMsg_(const ContainerAllocator& _alloc)
    : retcode(0)
    , ret_msg(_alloc)
    , req_id(_alloc)
    , session_id(_alloc)
    , semantic_result(_alloc)
    , reco_result(_alloc)
    , tts_result(_alloc)
    , answer_type(_alloc)
    , music_url(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _retcode_type;
  _retcode_type retcode;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ret_msg_type;
  _ret_msg_type ret_msg;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _req_id_type;
  _req_id_type req_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _session_id_type;
  _session_id_type session_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _semantic_result_type;
  _semantic_result_type semantic_result;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _reco_result_type;
  _reco_result_type reco_result;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _tts_result_type;
  _tts_result_type tts_result;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _answer_type_type;
  _answer_type_type answer_type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _music_url_type;
  _music_url_type music_url;




  typedef boost::shared_ptr< ::interact_msg_srv::AsrResultMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::interact_msg_srv::AsrResultMsg_<ContainerAllocator> const> ConstPtr;

}; // struct AsrResultMsg_

typedef ::interact_msg_srv::AsrResultMsg_<std::allocator<void> > AsrResultMsg;

typedef boost::shared_ptr< ::interact_msg_srv::AsrResultMsg > AsrResultMsgPtr;
typedef boost::shared_ptr< ::interact_msg_srv::AsrResultMsg const> AsrResultMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::interact_msg_srv::AsrResultMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::interact_msg_srv::AsrResultMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace interact_msg_srv

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'interact_msg_srv': ['/home/oslab/catkin_ws1/src/interact_proj/interact_msg_srv/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::interact_msg_srv::AsrResultMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interact_msg_srv::AsrResultMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interact_msg_srv::AsrResultMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interact_msg_srv::AsrResultMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interact_msg_srv::AsrResultMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interact_msg_srv::AsrResultMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::interact_msg_srv::AsrResultMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dddb0041baf54920d8b81ef590922632";
  }

  static const char* value(const ::interact_msg_srv::AsrResultMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdddb0041baf54920ULL;
  static const uint64_t static_value2 = 0xd8b81ef590922632ULL;
};

template<class ContainerAllocator>
struct DataType< ::interact_msg_srv::AsrResultMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "interact_msg_srv/AsrResultMsg";
  }

  static const char* value(const ::interact_msg_srv::AsrResultMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::interact_msg_srv::AsrResultMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 retcode\n\
string ret_msg\n\
string req_id\n\
string session_id\n\
string semantic_result\n\
string reco_result\n\
string tts_result\n\
string answer_type\n\
string music_url\n\
";
  }

  static const char* value(const ::interact_msg_srv::AsrResultMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::interact_msg_srv::AsrResultMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.retcode);
      stream.next(m.ret_msg);
      stream.next(m.req_id);
      stream.next(m.session_id);
      stream.next(m.semantic_result);
      stream.next(m.reco_result);
      stream.next(m.tts_result);
      stream.next(m.answer_type);
      stream.next(m.music_url);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AsrResultMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::interact_msg_srv::AsrResultMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::interact_msg_srv::AsrResultMsg_<ContainerAllocator>& v)
  {
    s << indent << "retcode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.retcode);
    s << indent << "ret_msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ret_msg);
    s << indent << "req_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.req_id);
    s << indent << "session_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.session_id);
    s << indent << "semantic_result: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.semantic_result);
    s << indent << "reco_result: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.reco_result);
    s << indent << "tts_result: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.tts_result);
    s << indent << "answer_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.answer_type);
    s << indent << "music_url: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.music_url);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTERACT_MSG_SRV_MESSAGE_ASRRESULTMSG_H
