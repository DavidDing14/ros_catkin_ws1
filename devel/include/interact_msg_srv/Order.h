// Generated by gencpp from file interact_msg_srv/Order.msg
// DO NOT EDIT!


#ifndef INTERACT_MSG_SRV_MESSAGE_ORDER_H
#define INTERACT_MSG_SRV_MESSAGE_ORDER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace interact_msg_srv
{
template <class ContainerAllocator>
struct Order_
{
  typedef Order_<ContainerAllocator> Type;

  Order_()
    : functionName()
    , pList()  {
    }
  Order_(const ContainerAllocator& _alloc)
    : functionName(_alloc)
    , pList(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _functionName_type;
  _functionName_type functionName;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _pList_type;
  _pList_type pList;




  typedef boost::shared_ptr< ::interact_msg_srv::Order_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::interact_msg_srv::Order_<ContainerAllocator> const> ConstPtr;

}; // struct Order_

typedef ::interact_msg_srv::Order_<std::allocator<void> > Order;

typedef boost::shared_ptr< ::interact_msg_srv::Order > OrderPtr;
typedef boost::shared_ptr< ::interact_msg_srv::Order const> OrderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::interact_msg_srv::Order_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::interact_msg_srv::Order_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace interact_msg_srv

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'interact_msg_srv': ['/home/oslab/catkin_ws1/src/interact_proj/interact_msg_srv/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::interact_msg_srv::Order_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interact_msg_srv::Order_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interact_msg_srv::Order_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interact_msg_srv::Order_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interact_msg_srv::Order_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interact_msg_srv::Order_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::interact_msg_srv::Order_<ContainerAllocator> >
{
  static const char* value()
  {
    return "de7af7864b3678cd3ae3bf317f3d2c2f";
  }

  static const char* value(const ::interact_msg_srv::Order_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xde7af7864b3678cdULL;
  static const uint64_t static_value2 = 0x3ae3bf317f3d2c2fULL;
};

template<class ContainerAllocator>
struct DataType< ::interact_msg_srv::Order_<ContainerAllocator> >
{
  static const char* value()
  {
    return "interact_msg_srv/Order";
  }

  static const char* value(const ::interact_msg_srv::Order_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::interact_msg_srv::Order_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Define a command with types and parameters.\n\
\n\
\n\
# Command Type:\n\
#  __go__            : move forward\n\
#  __turn__          : spin\n\
#  __speedUp__       : change linear speed\n\
#  __speedDown__     : change linear speed\n\
#  __turnSpeedUp__   : change angular speed\n\
#  __turnSpeedDown__ : change angular speed\n\
#  __stop__          : stop\n\
#  __goto__          : go to one place, one people\n\
#  __charge__        : power up\n\
\n\
string functionName\n\
\n\
# custom types\n\
#  DIRECTION : enum { 0:Left, 1:Right, 2:Back }\n\
#  QUANTIFIER : enum { 0:Step, 1:Meter, 2:Centimeterm 3:Degree }\n\
#  ADDRESS : string, specify a target (place or people)\n\
#  DEGREE : double\n\
#  DISTANCE : double\n\
#  ONE : \"1\", a bit\n\
\n\
# Parameter List of this command:\n\
#  __go__\n\
#    \"\"                           : no stop until blocked\n\
#    \"ONE\"\n\
#    \"DISTANCE|QUALIFIER\"         : (QUALIFIER != 3)\n\
#  __turn__\n\
#    \"DIRECTION\"                  : no stop\n\
#    \"DIRECTION|ONE\"\n\
#    \"DIRECTION|DEGREE|QUALIFIER\" \n\
#  __goto__\n\
#    \"ADDRESS\"\n\
\n\
string pList\n\
";
  }

  static const char* value(const ::interact_msg_srv::Order_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::interact_msg_srv::Order_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.functionName);
      stream.next(m.pList);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Order_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::interact_msg_srv::Order_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::interact_msg_srv::Order_<ContainerAllocator>& v)
  {
    s << indent << "functionName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.functionName);
    s << indent << "pList: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.pList);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTERACT_MSG_SRV_MESSAGE_ORDER_H
