// Generated by gencpp from file interact_msg_srv/PointDirection.msg
// DO NOT EDIT!


#ifndef INTERACT_MSG_SRV_MESSAGE_POINTDIRECTION_H
#define INTERACT_MSG_SRV_MESSAGE_POINTDIRECTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/PointStamped.h>
#include <geometry_msgs/PointStamped.h>

namespace interact_msg_srv
{
template <class ContainerAllocator>
struct PointDirection_
{
  typedef PointDirection_<ContainerAllocator> Type;

  PointDirection_()
    : header()
    , thingList()
    , start()
    , end()  {
    }
  PointDirection_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , thingList(_alloc)
    , start(_alloc)
    , end(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _thingList_type;
  _thingList_type thingList;

   typedef  ::geometry_msgs::PointStamped_<ContainerAllocator>  _start_type;
  _start_type start;

   typedef  ::geometry_msgs::PointStamped_<ContainerAllocator>  _end_type;
  _end_type end;




  typedef boost::shared_ptr< ::interact_msg_srv::PointDirection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::interact_msg_srv::PointDirection_<ContainerAllocator> const> ConstPtr;

}; // struct PointDirection_

typedef ::interact_msg_srv::PointDirection_<std::allocator<void> > PointDirection;

typedef boost::shared_ptr< ::interact_msg_srv::PointDirection > PointDirectionPtr;
typedef boost::shared_ptr< ::interact_msg_srv::PointDirection const> PointDirectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::interact_msg_srv::PointDirection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::interact_msg_srv::PointDirection_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace interact_msg_srv

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'interact_msg_srv': ['/home/oslab/catkin_ws1/src/interact_proj/interact_msg_srv/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::interact_msg_srv::PointDirection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interact_msg_srv::PointDirection_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interact_msg_srv::PointDirection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interact_msg_srv::PointDirection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interact_msg_srv::PointDirection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interact_msg_srv::PointDirection_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::interact_msg_srv::PointDirection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fe38ff8272c6f45b734d63f62a50cfab";
  }

  static const char* value(const ::interact_msg_srv::PointDirection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfe38ff8272c6f45bULL;
  static const uint64_t static_value2 = 0x734d63f62a50cfabULL;
};

template<class ContainerAllocator>
struct DataType< ::interact_msg_srv::PointDirection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "interact_msg_srv/PointDirection";
  }

  static const char* value(const ::interact_msg_srv::PointDirection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::interact_msg_srv::PointDirection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
string thingList # 如：\"Door\"这个字符串代表物体有Door\n\
geometry_msgs/PointStamped start # 代表指向的起点\n\
geometry_msgs/PointStamped end # 代表指向的终点\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PointStamped\n\
# This represents a Point with reference coordinate frame and timestamp\n\
Header header\n\
Point point\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::interact_msg_srv::PointDirection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::interact_msg_srv::PointDirection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.thingList);
      stream.next(m.start);
      stream.next(m.end);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PointDirection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::interact_msg_srv::PointDirection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::interact_msg_srv::PointDirection_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "thingList: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.thingList);
    s << indent << "start: ";
    s << std::endl;
    Printer< ::geometry_msgs::PointStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.start);
    s << indent << "end: ";
    s << std::endl;
    Printer< ::geometry_msgs::PointStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.end);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTERACT_MSG_SRV_MESSAGE_POINTDIRECTION_H
