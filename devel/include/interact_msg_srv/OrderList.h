// Generated by gencpp from file interact_msg_srv/OrderList.msg
// DO NOT EDIT!


#ifndef INTERACT_MSG_SRV_MESSAGE_ORDERLIST_H
#define INTERACT_MSG_SRV_MESSAGE_ORDERLIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <interact_msg_srv/Order.h>

namespace interact_msg_srv
{
template <class ContainerAllocator>
struct OrderList_
{
  typedef OrderList_<ContainerAllocator> Type;

  OrderList_()
    : header()
    , cmds()  {
    }
  OrderList_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , cmds(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::interact_msg_srv::Order_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::interact_msg_srv::Order_<ContainerAllocator> >::other >  _cmds_type;
  _cmds_type cmds;




  typedef boost::shared_ptr< ::interact_msg_srv::OrderList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::interact_msg_srv::OrderList_<ContainerAllocator> const> ConstPtr;

}; // struct OrderList_

typedef ::interact_msg_srv::OrderList_<std::allocator<void> > OrderList;

typedef boost::shared_ptr< ::interact_msg_srv::OrderList > OrderListPtr;
typedef boost::shared_ptr< ::interact_msg_srv::OrderList const> OrderListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::interact_msg_srv::OrderList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::interact_msg_srv::OrderList_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace interact_msg_srv

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'interact_msg_srv': ['/home/oslab/catkin_ws1/src/interact_proj/interact_msg_srv/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::interact_msg_srv::OrderList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interact_msg_srv::OrderList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interact_msg_srv::OrderList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interact_msg_srv::OrderList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interact_msg_srv::OrderList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interact_msg_srv::OrderList_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::interact_msg_srv::OrderList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2f9704fc3f08ad30048bbacbcdf53b64";
  }

  static const char* value(const ::interact_msg_srv::OrderList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2f9704fc3f08ad30ULL;
  static const uint64_t static_value2 = 0x048bbacbcdf53b64ULL;
};

template<class ContainerAllocator>
struct DataType< ::interact_msg_srv::OrderList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "interact_msg_srv/OrderList";
  }

  static const char* value(const ::interact_msg_srv::OrderList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::interact_msg_srv::OrderList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Define a serial of command with types and parameters.\n\
\n\
std_msgs/Header header\n\
\n\
\n\
# they will be done seriously and previous unexecuted cmds will be ignored,\n\
#  UNLESS the new CmdArray only contains __speedUp__, __speedDown__, __turnSpeedUp__, __turnSpeedDown__.\n\
Order[] cmds\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: interact_msg_srv/Order\n\
# Define a command with types and parameters.\n\
\n\
\n\
# Command Type:\n\
#  __go__            : move forward\n\
#  __turn__          : spin\n\
#  __speedUp__       : change linear speed\n\
#  __speedDown__     : change linear speed\n\
#  __turnSpeedUp__   : change angular speed\n\
#  __turnSpeedDown__ : change angular speed\n\
#  __stop__          : stop\n\
#  __goto__          : go to one place, one people\n\
#  __charge__        : power up\n\
\n\
string functionName\n\
\n\
# custom types\n\
#  DIRECTION : enum { 0:Left, 1:Right, 2:Back }\n\
#  QUANTIFIER : enum { 0:Step, 1:Meter, 2:Centimeterm 3:Degree }\n\
#  ADDRESS : string, specify a target (place or people)\n\
#  DEGREE : double\n\
#  DISTANCE : double\n\
#  ONE : \"1\", a bit\n\
\n\
# Parameter List of this command:\n\
#  __go__\n\
#    \"\"                           : no stop until blocked\n\
#    \"ONE\"\n\
#    \"DISTANCE|QUALIFIER\"         : (QUALIFIER != 3)\n\
#  __turn__\n\
#    \"DIRECTION\"                  : no stop\n\
#    \"DIRECTION|ONE\"\n\
#    \"DIRECTION|DEGREE|QUALIFIER\" \n\
#  __goto__\n\
#    \"ADDRESS\"\n\
\n\
string pList\n\
";
  }

  static const char* value(const ::interact_msg_srv::OrderList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::interact_msg_srv::OrderList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.cmds);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OrderList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::interact_msg_srv::OrderList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::interact_msg_srv::OrderList_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "cmds[]" << std::endl;
    for (size_t i = 0; i < v.cmds.size(); ++i)
    {
      s << indent << "  cmds[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::interact_msg_srv::Order_<ContainerAllocator> >::stream(s, indent + "    ", v.cmds[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTERACT_MSG_SRV_MESSAGE_ORDERLIST_H
